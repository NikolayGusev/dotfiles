// Place your key bindings in this file to override the defaults
[
  // Edamagit -vim keybindings
  {
    "key": "g g",
    "command": "cursorTop",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "g r",
    "command": "magit.refresh",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "tab",
    "command": "extension.vim_tab",
    "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && editorLangId != 'magit'"
  },
  {
    "key": "tab",
    "command": "-extension.vim_tab",
    "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
    "key": "x",
    "command": "magit.discard-at-point",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "k",
    "command": "-magit.discard-at-point"
  },
  {
    "key": "-",
    "command": "magit.reverse-at-point",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "v",
    "command": "-magit.reverse-at-point"
  },
  {
    "key": "shift+-",
    "command": "magit.reverting",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "shift+v",
    "command": "-magit.reverting"
  },
  {
    "key": "shift+o",
    "command": "magit.resetting",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "shift+x",
    "command": "-magit.resetting"
  },
  {
    "key": "x",
    "command": "-magit.reset-mixed"
  },
  {
    "key": "ctrl+u x",
    "command": "-magit.reset-hard"
  },
  {
    "key": "y",
    "command": "-magit.show-refs",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress|Visual).*$/"
  },
  {
    "key": "i",
    "command": "-magit.ignoring",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  // Neovim tab + magit compatibility
  {
    "key": "tab",
    "command": "-vscode-neovim.send",
    "args": "<Tab>"
  },
  {
    "key": "tab",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.init && neovim.mode != 'cmdline_normal' && neovim.mode != 'insert' && editorLangId != 'magit'",
    "args": "<Tab>"
  },
  // VSCode unbindings
  {
    "key": "ctrl+n",
    "command": "-workbench.action.files.newUntitledFile"
  },
  {
    "key": "ctrl+m",
    "command": "-editor.action.toggleTabFocusMode"
  },
  // vim-move support for neovim
  {
    "key": "alt+j",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus && neovim.mode != 'visual'"
  },
  {
    "key": "alt+k",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus && neovim.mode != 'visual'"
  },
  {
    "key": "alt+j",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.mode == 'visual'",
    "args": "<A-j>"
  },
  {
    "key": "alt+k",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.mode == 'visual'",
    "args": "<A-k>"
  },
  {
    "key": "alt+h",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.mode == 'visual'",
    "args": "<A-h>"
  },
  {
    "key": "alt+l",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.mode == 'visual'",
    "args": "<A-l>"
  },
  
  // vspacecode-bonus move around windows
  {
    "key": "ctrl+h",
    "command": "workbench.action.navigateLeft",
    "when": "!inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible && !isInDiffEditor"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.navigateDown",
    "when": "!inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.navigateUp",
    "when": "!inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.navigateRight",
    "when": "!inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible && !isInDiffEditor"
  },
  //vspacecode movement helpers
  {
    "key": "shift+space",
    "command": "vspacecode.space"
    // Let's try with a free for all mode: use this hotkey anywhere.
    // "when": "panelFocus || sideBarFocus || neovim.mode == 'insert'"
  },
  // Quick Navigation for diff view
  {
    "key": "ctrl+h",
    "command": "workbench.action.compareEditor.focusSecondarySide",
    "when": "isInDiffEditor && !isInDiffLeftEditor"
  },
  {
    "key": "ctrl+h",
    "command": "workbench.action.navigateLeft",
    "when": "isInDiffEditor && isInDiffLeftEditor"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.compareEditor.focusPrimarySide",
    "when": "isInDiffEditor && isInDiffLeftEditor"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.navigateRight",
    "when": "isInDiffEditor && !isInDiffLeftEditor"
  },
  ////////////////////
  // gitlens unbind //
  ////////////////////
  {
    "key": "alt+.",
    "command": "-gitlens.diffWithNext",
    "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "alt+cmd+g .",
    "command": "-gitlens.diffWithNext",
    "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "alt+.",
    "command": "-gitlens.diffWithNextInDiffLeft",
    "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "alt+cmd+g .",
    "command": "-gitlens.diffWithNextInDiffLeft",
    "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "alt+.",
    "command": "-gitlens.diffWithNextInDiffRight",
    "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "alt+cmd+g .",
    "command": "-gitlens.diffWithNextInDiffRight",
    "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "alt+,",
    "command": "-gitlens.diffWithPrevious",
    "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "alt+cmd+g ,",
    "command": "-gitlens.diffWithPrevious",
    "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "alt+,",
    "command": "-gitlens.diffWithPreviousInDiffLeft",
    "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "alt+cmd+g ,",
    "command": "-gitlens.diffWithPreviousInDiffLeft",
    "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "alt+,",
    "command": "-gitlens.diffWithPreviousInDiffRight",
    "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "alt+cmd+g ,",
    "command": "-gitlens.diffWithPreviousInDiffRight",
    "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "shift+alt+.",
    "command": "-gitlens.diffWithWorking",
    "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "alt+cmd+g shift+.",
    "command": "-gitlens.diffWithWorking",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "shift+alt+,",
    "command": "-gitlens.diffLineWithPrevious",
    "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "alt+cmd+g shift+,",
    "command": "-gitlens.diffLineWithPrevious",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "alt+c",
    "command": "-gitlens.showQuickCommitFileDetails",
    "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'alternate'"
  },
  {
    "key": "alt+cmd+g c",
    "command": "-gitlens.showQuickCommitFileDetails",
    "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "alt+b",
    "command": "-gitlens.toggleFileBlame",
    "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /blameable/"
  },
  {
    "key": "alt+cmd+g b",
    "command": "-gitlens.toggleFileBlame",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/"
  },
  {
    "key": "shift+alt+b",
    "command": "-gitlens.toggleCodeLens",
    "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'alternate'"
  },
  {
    "key": "alt+cmd+g shift+b",
    "command": "-gitlens.toggleCodeLens",
    "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'"
  },
  ////////////////////////
  // END gitlens unbind //
  ////////////////////////

  /////////////////
  // Diff Editor //
  /////////////////
  {
    "key": "enter",
    "command": "gitlens.openWorkingFile",
    "when":"isInDiffEditor"
  },
  {
    "key": "x",
    "command": "git.revertSelectedRanges",
    "when": "isInDiffEditor"
  },
  {
    "key": "cmd+k cmd+r",
    "command": "-git.revertSelectedRanges"
  },
  {
    "key": "s",
    "command": "git.stageSelectedRanges",
    "when": "isInDiffEditor"
  },
  {
    "key": "cmd+k alt+cmd+s",
    "command": "-git.stageSelectedRanges",
    "when": "isInDiffEditor"
  },
  {
    "key": "u",
    "command": "git.unstageSelectedRanges",
    "when": "isInDiffEditor"
  },
  {
    "key": "cmd+k cmd+n",
    "command": "-git.unstageSelectedRanges",
    "when": "isInDiffEditor"
  },
  {
    "key": "ctrl+n",
    // "command": "editor.action.diffReview.next",                // This opens a nice preview with a patch, but seems to be unnecessary
    "command": "workbench.action.compareEditor.nextChange",
    "when": "isInDiffEditor"
  },
  {
    "key": "f7",
    "command": "-editor.action.diffReview.next",
    "when": "isInDiffEditor"
  },
  {
    "key": "ctrl+p",
    // "command": "editor.action.diffReview.prev",
    "command": "workbench.action.compareEditor.previousChange",   // This opens a nice preview with a patch, but seems to be unnecessary
    "when": "isInDiffEditor"
  },
  {
    "key": "shift+f7",
    "command": "-editor.action.diffReview.prev",
    "when": "isInDiffEditor"
  },
  {
    "key": "shift+]",
    "command": "references-view.next",
    "when": "reference-list.hasResult && references-view.canNavigate"
  },
  {
    "key": "shift+[",
    "command": "references-view.prev",
    "when": "reference-list.hasResult && references-view.canNavigate"
  },
  {
    "key": "]",
    "command": "search.action.focusNextSearchResult",
    // "when": "(hasSearchResult || inSearchEditor) && (vim.mode != 'Insert' && !textInputFocus)"
    "when": "hasSearchResult && neovim.mode != 'Insert' && !textInputFocus || inSearchEditor && neovim.mode != 'Insert' && !textInputFocus"
  },
  {
    "key": "[",
    "command": "search.action.focusPreviousSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "shift+]",
    "command": "goToNextReference",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "key": "shift+[",
    "command": "goToPreviousReference",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  }
]