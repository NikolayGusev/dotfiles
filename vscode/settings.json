{
  /////////////////////////////////
  // vim and editing expierience //
  /////////////////////////////////
  "vscode-neovim.neovimExecutablePaths.win32": "C:\\Program Files\\Neovim\\bin\\nvim.exe",
  "vscode-neovim.neovimExecutablePaths.linux": "/usr/local/Cellar/neovim/0.8.0/bin/nvim",
  "editor.cursorSurroundingLines": 50,

  // General visiblitity
  "editor.renderWhitespace": "none",
  "window.zoomLevel": 1,
  "workbench.activityBar.visible": false,
  "editor.minimap.enabled": false,
  "workbench.editor.tabCloseButton": "off",
  "window.menuBarVisibility": "toggle",
  "extensions.ignoreRecommendations": false,
  
  // General usability
  "explorer.autoReveal": false,
  "workbench.editor.enablePreviewFromQuickOpen": false,
  "terminal.integrated.gpuAcceleration": "off",
  "editor.copyWithSyntaxHighlighting": false,
  "editor.formatOnSave": true,
  "diffEditor.renderSideBySide": false,
  "diffEditor.ignoreTrimWhitespace": false,
  
  // Never use pick window
  "editor.gotoLocation.multipleDeclarations": "goto",
  "editor.gotoLocation.multipleDefinitions": "goto",
  "editor.gotoLocation.multipleImplementations": "goto",
  "editor.gotoLocation.multipleReferences": "goto",
  "editor.gotoLocation.multipleTypeDefinitions": "goto",

  "telemetry.enableTelemetry": false,
  "telemetry.enableCrashReporter": false,
  "telemetry.telemetryLevel": "off",

  // TODO: remove this?
  // "terminal.integrated.commandsToSkipShell": [
    // "-workbench.action.terminal.paste"
  // ],

  ///////////
  // Theme //
  ///////////

  "editor.fontFamily": "Fira Code",
  "editor.fontLigatures": true,

  "workbench.iconTheme": "material-icon-theme",

  // Colors:
  "workbench.colorTheme": "Solarized Light",
  "workbench.colorCustomizations": {
    "editor.selectionBackground": "#ff7b00a1", // Current SELECTED text, required so that I can see what is yanked by vim
    // Make leap usable in VSCode. W/o this it is hard to see marks on unused functions and objects, etc.
    "editorUnnecessaryCode.opacity": "#000000ff",
    "editorUnnecessaryCode.border": "#aaaaaa"
    ////////////////////////////////////////
    // TODO: not sure why do I need those //
    ////////////////////////////////////////
    // "editor.selectionHighlightBackground": "#e7e8ff", //same content as the selection
    // "editor.findMatchBackground": "#00cc44a8", // Current SEARCH MATCH
    // "editor.findMatchHighlightBackground": "#e7b8ff", // Other SEARCH matches
    // "editorIndentGuide.activeBackground": "#e7b8ff77", 
    // "editorIndentGuide.background": "#00000011",
  },
  
  // magit better colors
  "editor.tokenColorCustomizations": {
    "textMateRules": [
      {
        "scope":"markup.deleted",
        "settings": {
          "foreground": "#FF0000",
          "fontStyle": "bold"
        }
      },
      {
        "scope":"markup.inserted",
        "settings": {
          "foreground": "#2ccc00",
          "fontStyle": "bold"
        }
      }
    ]
  },


  /////////
  // Git //
  /////////
  "git.autofetch": true,
  "git.confirmSync": false,
  "git.autofetchPeriod": 10,
  "git.ignoreLegacyWarning": true,
  "magit.display-buffer-function": "same-column",

  ////////////////
  // Extensions //
  ////////////////
  "numberedBookmarks.navigateThroughAllFiles": "replace",

  // vspacecode
  "vspacecode.bindingOverrides": [
    {
      "keys": "g.d",
      "name": "Diff",
      "type": "command",
      "command": "git.openChange"
    },
    {
      "keys": "g.S",
      "name": "Search commits",
      "type": "command",
      "command": "gitlens.showCommitSearch"
    },
    {
      "keys": "g.b",
      "name": "Toggle blame",
      "type": "command",
      "command": "gitlens.toggleFileBlame"
    },
    {
      "keys": "g.c",
      "name": "Show commits for selection",
      "type": "command",
      "command": "gitlens.showCommitsInView"
    },
    {
      "keys": "g.n",
      "name": "Next change",
      "type": "command",
      "command": "workbench.action.editor.nextChange"
    },
    {
      "keys": "g.p",
      "name": "Prev change",
      "type": "command",
      "command": "workbench.action.editor.previousChange"
    },
    // initialize repo
    {
      "keys": "g.i",
      "position": -1
    },
    // magit dispatch
    {
      "keys": "g.m",
      "position": -1
    },
    // Unstage changes
    {
      "keys": "g.U",
      "position": -1
    },
    // f => *diff   *vscode built in file changes history
    {
			"keys": "g.f",
			"name": "Show commits for file",
			"type": "command",
			"command": "gitlens.openFileHistory"
    }
  ],

  "javascript-repl.coverageTimes": false,
  
  "editor.codeActionsOnSave":{
    "source.fixAll.eslint": true 
  },
  "eslint.validate":[
    "javascript",
    "javascriptReact",
    "typescript",
    "typescriptReact"
  ],
  "[javascript]":{
    "editor.formatOnSave": false,
    "editor.defaultFormatter": "vscode.typescript-language-features" 
  },
  "[javascriptReact]":{
    "editor.formatOnSave": false
  },
  "[typescript]":{
    "editor.formatOnSave": false,
    "editor.defaultFormatter": "dbaeumer.vscode-eslint" 
  },
  "[typescriptReact]":{
    "editor.formatOnSave": false,
    "editor.defaultFormatter": "dbaeumer.vscode-eslint" 
  },
  
  "typescript.preferences.quoteStyle": "single",
  "typescript.preferences.importModuleSpecifier": "relative",
  "javascript.preferences.importModuleSpecifier": "relative",
  "typescript.preferences.useAliasesForRenames": false,

  "command-runner.showRunCommandInEditorContextMenu": false,
  "command-runner.terminal.autoClear": false,
  "command-runner.terminal.autoFocus": false,
  "command-runner.terminal.name": "runCommand",
  "command-runner.commands": {
    "assume unchanged":"git update-index --assume-unchanged ${file}",
    "assume unchanged list": "git ls-files -v | grep '^[[:lower:]]'",
    "no-assume unchanged": "git update-index --no-assume-unchanged ${file}",
    "no-assume unchanged all": "git ls-files -v | grep '^[a-z]' | cut -c3- | xargs git update-index --no-assume-unchanged --",
    "delete merged branches": "git branch --merged origin/master | xargs git branch -d",
    "checkout penultimate version": "git checkout HEAD~1 -- ${file}",
    "checkout previous version...": "git checkout ${input} -- ${file}",


    // Those seem to be broken
    "checkout {commit} {filename} by selection": "git checkout `echo ${selectedTextList} | cut -d' ' -f1` -- `echo ${selectedTextList} | cut -d' ' -f2`",
    "revert changes {commit} {filename} by selection": "git show `echo ${selectedTextList} | cut -d' ' -f1` -- `echo ${selectedTextList} | cut -d' ' -f2` | git apply -R",

    "checkout {commit filename} by input": "git checkout ${input}",
    "revert changes {commit filename} by input": "git show ${input} | git apply -R",

    // "revert changes {commit} {filename} by selection": "git show `echo ${selectedTextList} | cut -d' ' -f1` -- `echo ${selectedTextList} | cut -d' ' -f2` | git apply -R",
    // "revert changes {commit} {filename} by input2": "git show `echo ${input} | cut -d' ' -f1` -- `echo ${input} | cut -d' ' -f2` | git apply -R",
    // "revert changes {commit} {filename} by input": "git show ${input} | git apply -R",
    // "revert changes from current patch file": "git apply -R '${file}'",

    "echo selected": "echo ${selectedTextList}",
    "double input test": "echo ${input} ${input} ${input}",


  // gitlens 
  "gitlens.currentLine.enabled": false,
  "gitlens.hovers.currentLine.over": "line",
  "gitlens.codeLens.scopes": [],
  "gitlens.statusBar.alignment": "left",
  "gitlens.defaultDateFormat": null,
  "gitlens.defaultTimeFormat": null,
  "gitlens.showWelcomeOnInstall": false,
  "gitlens.showWhatsNewAfterUpgrades": false,
  "gitlens.codeLens.enabled": false,
  "gitlens.statusBar.command": "gitlens.revealCommitInView",
  "gitlens.hovers.enabled": false
  }
}