{
  //////////////////
  // Work related //
  //////////////////
  "remote.SSH.remotePlatform": {
    "devbox": "linux"
  },
  "vscode-neovim.neovimExecutablePaths.win32": "C:\\Program Files\\Neovim\\bin\\nvim.exe",
  // "vscode-neovim.neovimExecutablePaths.win32": "D:\\dev\\apps\\Neovim\\bin\\nvim.exe",
  // "workbench.tree.indent": 20,


  /////////////////////////////////
  // vim and editing expierience //
  /////////////////////////////////
  "vscode-neovim.neovimExecutablePaths.linux": "/usr/local/Cellar/neovim/0.8.0/bin/nvim",
  "editor.cursorSurroundingLines": 50,

  // General visiblitity
  "editor.renderWhitespace": "none",
  "window.zoomLevel": 2,
  "workbench.activityBar.visible": false,
  "editor.minimap.enabled": false,
  "workbench.editor.tabCloseButton": "off",
  "window.menuBarVisibility": "toggle",
  "extensions.ignoreRecommendations": false,
  "breadcrumbs.enabled": false,
  "editor.inlayHints.enabled": "offUnlessPressed",
  "editor.lineNumbers": "off",
  "editor.showFoldingControls": "never",
  "editor.lineDecorationsWidth": 0,
  "editor.scrollbar.horizontalScrollbarSize": 4,
  "editor.scrollbar.verticalScrollbarSize": 6,


  // General usability
  "explorer.autoReveal": false,
  "workbench.editor.enablePreviewFromQuickOpen": false,
  "terminal.integrated.gpuAcceleration": "off",
  "editor.copyWithSyntaxHighlighting": false,
  "editor.formatOnSave": true,
  "diffEditor.renderSideBySide": false,
  "update.enableWindowsBackgroundUpdates": false, // Update manually
  "update.mode": "none", // Update manually
  "extensions.autoCheckUpdates": false,
  "telemetry.enableTelemetry": false,
  "telemetry.enableCrashReporter": false,
  "telemetry.telemetryLevel": "off",
  "extensions.experimental.affinity": {
    "asvetliakov.vscode-neovim": 1,
    "VSpaceCode.vspacecode": 1,
  },


  // Terminal
  "terminal.integrated.tabs.hideCondition": "never",
  "terminal.integrated.tabs.title": "${cwdFolder}",
  "terminal.integrated.commandsToSkipShell": [
    "workbench.action.terminal.focusTabs"
  ],

  // Never use pick window
  "editor.gotoLocation.multipleDeclarations": "goto",
  "editor.gotoLocation.multipleDefinitions": "goto",
  "editor.gotoLocation.multipleImplementations": "goto",
  "editor.gotoLocation.multipleReferences": "goto",
  "editor.gotoLocation.multipleTypeDefinitions": "goto",

  // TODO: remove this?
  // "terminal.integrated.commandsToSkipShell": [
  // "-workbench.action.terminal.paste"
  // ],

  ///////////
  // Theme //
  ///////////

  "editor.fontFamily": "Fira Code",
  "editor.fontLigatures": true,

  "workbench.iconTheme": "material-icon-theme",

  // Colors:
  "workbench.colorTheme": "Solarized Light",
  "workbench.colorCustomizations": {
    "editor.selectionBackground": "#ff7b0041", // Current SELECTED text, required so that I can see what is yanked by vim
    "editor.selectionHighlightBackground": "#00007b21",

    // Make leap usable in VSCode. W/o this it is hard to see marks on unused functions and objects, etc.
    "editorUnnecessaryCode.opacity": "#000000ff",
    "editorUnnecessaryCode.border": "#aaaaaa",

    "editorIndentGuide.activeBackground": "#e7b8ff77",
    "editorIndentGuide.background": "#00000011",

    "editorStickyScroll.background": "#FFFFDDFF",

    "editorInlayHint.background": "#00000000",
    "editorInlayHint.foreground": "#00000055",
    "editorInlayHint.typeForeground": "#00000055",
    "editorInlayHint.parameterForeground": "#00000055",
    
    "editor.foldBackground": "#e0a96544"
  },

  // magit better colors
  "editor.tokenColorCustomizations": {
    "textMateRules": [
      {
        "scope": "markup.deleted",
        "settings": {
          "foreground": "#FF0000",
          "fontStyle": "bold"
        }
      },
      {
        "scope": "markup.inserted",
        "settings": {
          "foreground": "#2ccc00",
          "fontStyle": "bold"
        }
      }
    ]
  },

  "multiCommand.commands": [
    {
      "command": "multiCommand.openTerminalOutput",
      "sequence": [
        "workbench.action.terminal.selectAll",
        "workbench.action.terminal.copySelection",
        "workbench.action.terminal.clearSelection",
        "workbench.action.files.newUntitledFile",
        "editor.action.clipboardPasteAction"
      ]
    },
    {
      "command": "multiCommand.splitCurrentTerminal",
      "interval": 500,
      "sequence": [
        "workbench.action.terminal.splitInstance",
        "workbench.action.terminal.focusTabs",
        "workbench.action.terminal.renameInstance",
      ]
    },
    {
      "command": "multiCommand.addNewTerminal",
      "interval": 500,
      "sequence": [
        "workbench.action.terminal.new",
        "workbench.action.terminal.focusTabs",
        "workbench.action.terminal.renameInstance",
      ]
    },
  ],

  /////////
  // Git //
  /////////
  "git.autofetch": true,
  "git.confirmSync": false,
  "git.autofetchPeriod": 10,
  "git.ignoreLegacyWarning": true,
  "magit.display-buffer-function": "same-column",
  "magit.quick-switch-enabled": true,

  ////////////////
  // Extensions //
  ////////////////
  "numberedBookmarks.navigateThroughAllFiles": "replace",
  "numberedBookmarks.keepBookmarksOnLineDelete": true,

  "whichkey.transient": {
    "customErrorTransient": {
      "title": "Error transient",
      "bindings": [
        {
          "key": "f",
          "name": "Fix error",
          "command": "editor.action.quickFix"
        },
        {
          "key": "j",
          "name": "Next error",
          "command": "editor.action.marker.next"
        },
        {
          "key": "k",
          "name": "Previous error",
          "command": "editor.action.marker.prev"
        },
        {
          "key": "n",
          "name": "Next error",
          "command": "editor.action.marker.next"
        },
        {
          "key": "p",
          "name": "Previous error",
          "command": "editor.action.marker.prev"
        },
        {
          "key": "N",
          "name": "Previous error",
          "command": "editor.action.marker.prev"
        }
      ]
    },
    "symbol": {
      "title": "Highlight symbol transient",
      "bindings": [
        {
          "key": "p",
          "name": "Previous occurrence",
          "command": "editor.action.wordHighlight.prev"
        },
        {
          "key": "N",
          "name": "Previous occurrence",
          "command": "editor.action.wordHighlight.prev"
        },
        {
          "key": "n",
          "name": "Next occurrence",
          "command": "editor.action.wordHighlight.next"
        },
        {
          "key": "/",
          "name": "Search in a project with a selection",
          "commands": [
            "editor.action.addSelectionToNextFindMatch",
            "workbench.action.findInFiles"
          ]
        }
      ]
    },
    "lineMoving": {
      "title": "Line moving transient",
      "bindings": [
        {
          "key": "J",
          "name": "Move lines down",
          "command": "editor.action.moveLinesDownAction"
        },
        {
          "key": "K",
          "name": "Move lines up",
          "command": "editor.action.moveLinesUpAction"
        }
      ]
    },
    "frameZooming": {
      "title": "Frame zooming transient",
      "bindings": [
        {
          "key": "=",
          "name": "Zoom in",
          "command": "workbench.action.zoomIn"
        },
        {
          "key": "+",
          "name": "Zoom in",
          "command": "workbench.action.zoomIn"
        },
        {
          "key": "-",
          "name": "Zoom out",
          "command": "workbench.action.zoomOut"
        },
        {
          "key": "0",
          "name": "Reset zoom",
          "command": "workbench.action.zoomReset"
        }
      ]
    },
    "fontZooming": {
      "title": "Front zooming transient",
      "bindings": [
        {
          "key": "=",
          "name": "Zoom in",
          "command": "editor.action.fontZoomIn"
        },
        {
          "key": "+",
          "name": "Zoom in",
          "command": "editor.action.fontZoomIn"
        },
        {
          "key": "-",
          "name": "Zoom out",
          "command": "editor.action.fontZoomOut"
        },
        {
          "key": "0",
          "name": "Reset zoom",
          "command": "editor.action.fontZoomReset"
        }
      ]
    },
    "imageZooming": {
      "title": "Image zooming transient",
      "bindings": [
        {
          "key": "=",
          "name": "Zoom in",
          "command": "imagePreview.zoomIn"
        },
        {
          "key": "+",
          "name": "Zoom in",
          "command": "imagePreview.zoomIn"
        },
        {
          "key": "-",
          "name": "Zoom out",
          "command": "imagePreview.zoomOut"
        }
      ]
    },
    "smartExpand": {
      "title": "Smart expand transient",
      "bindings": [
        {
          "key": "v",
          "name": "Grow selection",
          "command": "editor.action.smartSelect.grow"
        },
        {
          "key": "V",
          "name": "Shrink selection",
          "command": "editor.action.smartSelect.shrink"
        }
      ]
    },
    "horizontalResize": {
      "title": "Horizontal resize transient",
      "bindings": [
        {
          "key": "g",
          "name": "Grow",
          "command": "workbench.action.increaseViewWidth"
        },
        {
          "key": "s",
          "name": "Shrink",
          "command": "workbench.action.decreaseViewWidth"
        }
      ]
    },
    "verticalResize": {
      "title": "Vertical resize transient",
      "bindings": [
        {
          "key": "g",
          "name": "Grow",
          "command": "workbench.action.increaseViewHeight"
        },
        {
          "key": "s",
          "name": "Shrink",
          "command": "workbench.action.decreaseViewHeight"
        }
      ]
    },
    "windowOpacity": {
      "title": "Windnow opacity",
      "bindings": [
        {
          "key": "j",
          "name": "Increase opacity",
          "command": "glassit.increase"
        },
        {
          "key": "k",
          "name": "Decrease opacity",
          "command": "glassit.decrease"
        }
      ]
    },
    "gitChangesInFile": {
      "title": "Navigate git changes in file",
      "bindings": [
        {
          "key": "n",
          "name": "Next",
          "command": "workbench.action.editor.nextChange"
        },
        {
          "key": "p",
          "name": "Previous",
          "command": "workbench.action.editor.previousChange"
        },
        {
          "key": "N",
          "name": "Previous",
          "command": "workbench.action.editor.previousChange"
        }
      ]
    }
  },

  // vspacecode
  // default bindings here: https://github.com/VSpaceCode/vscode-which-key/blob/cb073ed69491d76501cb1042c060c3206a806a19/package.json
  "vspacecode.bindingOverrides": [
    {
      "keys": " ",
      "name": "+Find file in project",
      "type": "command",
      "command": "workbench.action.quickOpen"
    },
    {
      "keys": ",",
      "name": "Commands",
      "type": "command",
      "command": "workbench.action.showCommands"
    },
    {
      "keys": "e.e",
      "name": "Error transient",
      "type": "commands",
      "commands": [
        "editor.action.marker.prev",
        "whichkey.showTransient"
      ],
      "args": [null, "whichkey.transient.customErrorTransient"]
    },
    // Show active file in tree/explorer view
    {
      "keys": "f.T",
      "position": -1
    },
    // Was toogle file panel
    {
      "keys": "f.t",
      "position": -1
    },
    // was Open file/folder (creates new file usually, so its easier to use space-f-n instead)
    {
      "keys": "f.f",
      "name": "Show active file in tree/explorer view",
      "type": "command",
      "command": "workbench.files.action.showActiveFileInExplorer"
    },
    {
      "keys": "g.d",
      "name": "Diff",
      "type": "command",
      "command": "git.openChange"
    },
    {
      "keys": "g.t",
      "name": "Timeline",
      "type": "command",
      "command": "timeline.focus"
    },
    {
      "keys": "g.S",
      "name": "Search commits",
      "type": "command",
      "command": "gitlens.showCommitSearch"
    },
    {
      "keys": "g.b",
      "name": "Toggle blame",
      "type": "command",
      "command": "gitlens.toggleFileBlame"
    },
    {
      "keys": "g.c",
      "name": "Show commits for selection",
      "type": "command",
      "command": "gitlens.showCommitsInView"
    },
    {
      "keys": "g.g",
      "name": "Git Graph",
      "type": "command",
      "command": "git-graph.view"
    },
    {
      "keys": "g.n",
      "name": "Next change",
      "type": "commands",
      "commands": [
        "workbench.action.editor.nextChange",
        "whichkey.showTransient"
      ],
      "args": [null, "whichkey.transient.gitChangesInFile"]
    },
    {
      "keys": "g.p",
      "name": "Prev change",
      "type": "commands",
      "commands": [
        "workbench.action.editor.previousChange",
        "whichkey.showTransient"
      ],
      "args": [null, "whichkey.transient.gitChangesInFile"]
    },
    {
      "keys": "g.l",
      "name": "Show commits for line",
      "type": "command",
      "command": "gitlens.showLineHistoryView"
    },
    // f => *diff   *vscode built in file changes history
    {
      "keys": "g.f",
      "name": "Show commits for file",
      "type": "command",
      "command": "gitlens.openFileHistory"
    },
    // initialize repo
    {
      "keys": "g.i",
      "position": -1
    },
    // magit dispatch
    {
      "keys": "g.m",
      "position": -1
    },
    // Unstage changes
    {
      "keys": "g.U",
      "position": -1
    },
    {
      "keys": "j.j",
      "name": "Jump to symbol in buffer",
      "type": "command",
      "command": "workbench.action.gotoSymbol",
    },
    {
      "keys": "j.J",
      "name": "Jump to symbol in workspace",
      "type": "command",
      "command": "workbench.action.showAllSymbols",
    },
    {
      "keys": "r.r",
      "name": "Replace",
      "type": "command",
      "command": "editor.action.startFindReplaceAction"
    },
    {
      "keys": "r.R",
      "name": "Replace",
      "type": "command",
      "command": "editor.action.startFindReplaceAction"
    },
    {
      "keys": "r.b",
      "position": -1
    },
    {
      "keys": "r.s",
      "position": -1
    },
    // was Search in a project
    {
      "keys": "s.p",
      "position": -1
    },
    {
      "keys": "s.f",
      "name": "Search in files",
      "type": "command",
      "command": "workbench.action.findInFiles"
    },
    {
      "keys": "s.F",
      "name": "Search in files with a selection",
      "type": "commands",
      "commands": [
        "editor.action.addSelectionToNextFindMatch",
        "workbench.action.findInFiles",
        "workbench.action.focusActiveEditorGroup",
        "whichkey.showTransient"
      ],
      "args": [null, null, null]
    },

    // move toggles to root "t" instead of "T"
    {
      "keys": "T",
      "position": -1
    },
    {
      "keys": "t.t",
      "name": "Toggle terminal",
      "type": "commands",
      "commands": [
        "workbench.action.terminal.focus",
        "workbench.action.terminal.focusTabs"
      ]
    },
    // was Toggle tab visibility
    {
      "keys": "t.T",
      "position": -1
    },
    {
      "keys": "t.h",
      "name": "Toggle help",
      "type": "commands",
      "commands": [
        "workbench.action.toggleAuxiliaryBar",
        "docsView.documentationView.unpin",
        "workbench.action.focusActiveEditorGroup"
      ]
    },
    {
      "keys": "t.H",
      "name": "Pin help",
      "type": "commands",
      "commands": [
        "docsView.documentationView.pin",
      ]
    },
    {
      "keys": "t.c",
      "name": "Open terminal output",
      "type": "command",
      "command": "multiCommand.openTerminalOutput"
    },
    {
      "keys": "t.o",
      "name": "Toggle output",
      "type": "command",
      "command": "workbench.action.output.toggleOutput"
    },
    {
      "keys": "t.p",
      "name": "Toggle problems",
      "type": "command",
      "command": "workbench.actions.view.problems"
    },
    {
      "keys": "t.d",
      "name": "Toggle debug",
      "type": "command",
      "command": "workbench.debug.action.toggleRepl"
    },
    {
      "keys": "t.g",
      "name": "Toggle gitlens",
      "type": "commands",
      "commands": ["gitlens.toggleCodeLens", "gitlens.toggleLineBlame"]
    },
    {
      "keys": "t.s",
      "name": "Toggle sticky scroll",
      "type": "command",
      "command": "editor.action.toggleStickyScroll"
    },
    {
      "name": "Toggle side bar visibility",
      "keys": "t.S",
      "type": "command",
      "command": "workbench.action.toggleSidebarVisibility"
    },
    {
      "keys": "t.w",
      "name": "Toggle leading/trailing whitespace differences",
      "type": "command",
      "command": "toggle.diff.ignoreTrimWhitespace"
    },
    {
      "keys": "t.W",
      "name": "Toggle render whitespaces",
      "type": "command",
      "command": "editor.action.toggleRenderWhitespace"
    },
    {
      "keys": "t.R",
      "name": "Toggle word wrap",
      "type": "command",
      "command": "editor.action.toggleWordWrap"
    },
    // standard things moved "T" -> "t"
    {
      "keys": "t.j",
      "name": "Toggle panel visibility",
      "type": "command",
      "command": "workbench.action.togglePanel"
    },
    {
      "keys": "t.f",
      "name": "Toggle full screen",
      "type": "command",
      "command": "workbench.action.toggleFullScreen"
    },
    {
      "keys": "t.m",
      "name": "Toggle maximized panel",
      "type": "command",
      "command": "workbench.action.toggleMaximizedPanel"
    },
    {
      "keys": "t.z",
      "name": "Toggle zen mode",
      "type": "command",
      "command": "workbench.action.toggleZenMode"
    },
    {
      "keys": "w.h",
      "name": "Change window horizontal size",
      "type": "command",
      "command": "whichkey.showTransient",
      "args": "whichkey.transient.horizontalResize"
    },
    {
      "keys": "w.v",
      "name": "Change window vertical size",
      "type": "command",
      "command": "whichkey.showTransient",
      "args": "whichkey.transient.verticalResize"
    },
    {
      "keys": "w.j",
      "name": "Split editor below",
      "type": "command",
      "command": "workbench.action.splitEditorDown"
    },
    {
      "keys": "w.l",
      "name": "Split editor right",
      "type": "command",
      "command": "workbench.action.splitEditor"
    },
    // split below
    {
      "keys": "w.-",
      "position": -1
    },
    // split right
    {
      "keys": "w./",
      "position": -1
    },
    // shrink window
    {
      "keys": "w.[",
      "position": -1
    },
    // grow window
    {
      "keys": "w.]",
      "position": -1
    },
    // close window
    {
      "keys": "w.d",
      "position": -1
    },
    // focus window up
    {
      "keys": "w.k",
      "position": -1
    },
    // split window below
    {
      "keys": "w.s",
      "position": -1
    },
    // focus next window
    {
      "keys": "w.w",
      "position": -1
    },
    // focus previous window
    {
      "keys": "w.W",
      "position": -1
    },
    // find all references
    {
      "keys": "x.a",
      "position": -1
    },
    // open link
    {
      "keys": "x.o",
      "position": -1
    },
    // to upper case
    {
      "keys": "x.U",
      "position": -1
    },
    // to lower case
    {
      "keys": "x.u",
      "position": -1
    },
    // move lines up
    {
      "keys": "x.K",
      "position": -1
    },
    // move lines down
    {
      "keys": "x.J",
      "position": -1
    },
    // Delete trailing whitespaces
    {
      "keys": "x.d",
      "position": -1
    },
    // lines - duplicate/sort
    {
      "keys": "x.l",
      "position": -1
    },
    // refactor
    {
      "keys": "x.R",
      "position": -1
    },
    {
      "keys": "x.e",
      "name": "Extract",
      "type": "command",
      "command": "abracadabra.extract"
    },
    {
      "keys": "x.i",
      "name": "Inline",
      "type": "command",
      "command": "abracadabra.inline"
    },
    {
      "keys": "x.s",
      "name": "Singature (change)",
      "type": "command",
      "command": "abracadabra.changeSignature"
    },
    {
      "keys": "z.o",
      "name": "Opacity",
      "type": "command",
      "command": "whichkey.showTransient",
      "args": "whichkey.transient.windowOpacity"
    },
  ],

  "javascript-repl.coverageTimes": false,

  
  // TODO: Delete this old option if everything works
  //  "eslint.autoFixOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },

  "eslint.validate": [
    "javascript",
    "javascriptreact",
    {
      "language": "typescript",
      "autofix": true
    },
    {
      "language": "typescriptreact",
      "autofix": true
    }
  ],
  
  "editor.formatOnSave": true,
  "[javascript]": {
    "editor.formatOnSave": false,
  },
  "[javascriptreact]": {
    "editor.formatOnSave": false
  },
  "[typescript]": {
    "editor.formatOnSave": false,
  },
  "[typescriptreact]": {
    "editor.formatOnSave": false,
  },

  "typescript.preferences.quoteStyle": "single",
  "typescript.preferences.importModuleSpecifier": "relative",
  "javascript.preferences.importModuleSpecifier": "relative",
  "typescript.preferences.useAliasesForRenames": false,

  "command-runner.showRunCommandInEditorContextMenu": false,
  "command-runner.terminal.autoClear": false,
  "command-runner.terminal.autoFocus": false,
  "command-runner.terminal.name": "runCommand",
  "command-runner.commands": {
    "assume unchanged": "git update-index --assume-unchanged ${file}",
    "assume unchanged list": "git ls-files -v | grep '^[[:lower:]]'",
    "no-assume unchanged": "git update-index --no-assume-unchanged ${file}",
    "no-assume unchanged all": "git ls-files -v | grep '^[a-z]' | cut -c3- | xargs git update-index --no-assume-unchanged --",
    "delete merged branches": "git branch --merged origin/master | xargs git branch -d",
    "checkout penultimate version": "git checkout HEAD~1 -- ${file}",
    "checkout previous version...": "git checkout ${input} -- ${file}",

    // Those seem to be broken
    "checkout {commit} {filename} by selection": "git checkout `echo ${selectedTextList} | cut -d' ' -f1` -- `echo ${selectedTextList} | cut -d' ' -f2`",
    "revert changes {commit} {filename} by selection": "git show `echo ${selectedTextList} | cut -d' ' -f1` -- `echo ${selectedTextList} | cut -d' ' -f2` | git apply -R",

    "checkout {commit filename} by input": "git checkout ${input}",
    "revert changes {commit filename} by input": "git show ${input} | git apply -R",

    // "revert changes {commit} {filename} by selection": "git show `echo ${selectedTextList} | cut -d' ' -f1` -- `echo ${selectedTextList} | cut -d' ' -f2` | git apply -R",
    // "revert changes {commit} {filename} by input2": "git show `echo ${input} | cut -d' ' -f1` -- `echo ${input} | cut -d' ' -f2` | git apply -R",
    // "revert changes {commit} {filename} by input": "git show ${input} | git apply -R",
    // "revert changes from current patch file": "git apply -R '${file}'",
    
    "sparse-checkout init": "git sparse-checkout init",
    "sparse-checkout disable": "git sparse-checkout disable",
    // e.g.
    //    /*
    //    !/packages/*
    //    /packages/my-package
    "sparse-checkout edit": "vim .git/info/sparse-checkout",

    "echo selected": "echo ${selectedTextList}",
    "double input test": "echo ${input} ${input} ${input}"
  },

  // gitlens
  "gitlens.currentLine.enabled": false,
  "gitlens.hovers.currentLine.over": "line",
  "gitlens.codeLens.scopes": [],
  "gitlens.statusBar.alignment": "left",
  "gitlens.defaultDateFormat": null,
  "gitlens.defaultTimeFormat": null,
  "gitlens.showWelcomeOnInstall": false,
  "gitlens.showWhatsNewAfterUpgrades": false,
  "gitlens.codeLens.enabled": false,
  "gitlens.statusBar.command": "gitlens.revealCommitInView",
  "gitlens.hovers.enabled": false,
  "gitlens.telemetry.enabled": false,
  "gitlens.advanced.messages": {
    "suppressGitVersionWarning": true
  },
  // See if it works at work
  "workbench.editorAssociations": {
    "git-rebase-todo": "default" // disable gitlens rebase i dialog
  },

  "vsCodeGitWorktrees.move.openNewVscodeWindow": true,
  
  "ActiveFileInStatusBar.fullpath": false,
  
  "glassit.alpha": 255,

  "totalTypeScript.showFullTranslation": true,
  "totalTypeScript.hideBasicTips": true,
  
  // Don't format settings.json automatically. This loses intellisense though.
  "files.associations": {
    "**/settings.json": "plaintext"
  }
}